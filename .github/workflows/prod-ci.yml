name: Prod CI Workflow

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        # Construct the tag dynamically
        tags: ghcr.io/${{ github.repository_owner }}/${{ secrets.BACKEND_IMAGE }}:${{ github.sha }}
        cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ secrets.BACKEND_IMAGE }}:latest
        cache-to: type=inline

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        # Construct the tag dynamically
        tags: ghcr.io/${{ github.repository_owner }}/${{ secrets.FRONTEND_IMAGE }}:${{ github.sha }}
        cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ secrets.FRONTEND_IMAGE }}:latest
        cache-to: type=inline

    - name: SSH and Deploy with Docker Compose
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd 
          git pull origin main
          echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo "BACKEND_IMAGE_TAG=${{ github.sha }}" > .env
          echo "FRONTEND_IMAGE_TAG=${{ github.sha }}" >> .env
          echo "REGISTRY_USER=${{ github.repository_owner }}" >> .env
          docker-compose pull
          docker-compose up -d --remove-orphans
          docker image prune -af
